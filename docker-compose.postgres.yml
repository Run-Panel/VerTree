version: '3.8'

services:
  # VerTree 主应用
  vertree-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: vertree-postgres-app
    ports:
      - "${SERVER_PORT:-8080}:8080"
    env_file:
      - postgres.env
    volumes:
      - ./uploads:/root/uploads:rw
      - ./config:/root/config:ro
      - app_logs:/root/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - vertree-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: vertree-postgres-db
    env_file:
      - postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - postgres_logs:/var/log/postgresql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vertree_user} -d ${POSTGRES_DB:-vertree}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - vertree-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c log_statement=mod
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: vertree-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password_change_me}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vertree-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: vertree-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      vertree-app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vertree-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 32M

  # PostgreSQL 备份服务 (可选)
  postgres-backup:
    image: postgres:15-alpine
    container_name: vertree-postgres-backup
    env_file:
      - postgres.env
    volumes:
      - ./backups:/backups
      - postgres_backup_scripts:/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
      echo '#!/bin/sh' > /scripts/backup.sh &&
      echo 'pg_dump -h postgres -U $$POSTGRES_USER $$POSTGRES_DB | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz' >> /scripts/backup.sh &&
      echo 'find /backups -name \"backup_*.sql.gz\" -mtime +7 -delete' >> /scripts/backup.sh &&
      chmod +x /scripts/backup.sh &&
      crond -f
      "
    restart: unless-stopped
    networks:
      - vertree-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  app_logs:
    driver: local
  postgres_logs:
    driver: local
  redis_logs:
    driver: local
  postgres_backup_scripts:
    driver: local

networks:
  vertree-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
